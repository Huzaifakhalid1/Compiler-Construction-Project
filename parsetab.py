
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA DETERMINANT DIVIDE EQUALS ID LBRACKET LPAREN MATRIX MINUS NUM PLUS RBRACKET RPAREN SCALAR SEMICOLON TIMES TRANSPOSEprogram : statement_liststatement_list : statement statement_list\n| statementstatement : MATRIX ID EQUALS matrix SEMICOLONstatement : MATRIX ID EQUALS ID op ID SEMICOLONop : PLUS\n| MINUS\n| TIMES\n| DIVIDEstatement : MATRIX ID EQUALS TRANSPOSE LPAREN ID RPAREN SEMICOLONstatement : MATRIX ID EQUALS DETERMINANT LPAREN ID RPAREN SEMICOLONstatement : SCALAR ID EQUALS DETERMINANT LPAREN ID RPAREN SEMICOLONmatrix : LBRACKET row_list RBRACKETrow_list : row COMMA row_list\n| rowrow : LBRACKET num_list RBRACKETnum_list : NUM COMMA num_list\n| NUM'
    
_lr_action_items = {'MATRIX':([0,3,22,37,44,45,47,],[4,4,-4,-5,-10,-11,-12,]),'SCALAR':([0,3,22,37,44,45,47,],[5,5,-4,-5,-10,-11,-12,]),'$end':([1,2,3,6,22,37,44,45,47,],[0,-1,-3,-2,-4,-5,-10,-11,-12,]),'ID':([4,5,9,17,18,19,20,21,23,24,28,],[7,8,11,29,-6,-7,-8,-9,30,31,36,]),'EQUALS':([7,8,],[9,10,]),'TRANSPOSE':([9,],[13,]),'DETERMINANT':([9,10,],[14,16,]),'LBRACKET':([9,15,35,],[15,25,25,]),'PLUS':([11,],[18,]),'MINUS':([11,],[19,]),'TIMES':([11,],[20,]),'DIVIDE':([11,],[21,]),'SEMICOLON':([12,29,34,38,39,43,],[22,37,-13,44,45,47,]),'LPAREN':([13,14,16,],[23,24,28,]),'NUM':([25,41,],[33,33,]),'RBRACKET':([26,27,32,33,40,42,46,],[34,-15,40,-18,-16,-14,-17,]),'COMMA':([27,33,40,],[35,41,-16,]),'RPAREN':([30,31,36,],[38,39,43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,],[2,6,]),'statement':([0,3,],[3,3,]),'matrix':([9,],[12,]),'op':([11,],[17,]),'row_list':([15,35,],[26,42,]),'row':([15,35,],[27,27,]),'num_list':([25,41,],[32,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',34),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',40),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',41),
  ('statement -> MATRIX ID EQUALS matrix SEMICOLON','statement',5,'p_statement_matrix','parser.py',49),
  ('statement -> MATRIX ID EQUALS ID op ID SEMICOLON','statement',7,'p_statement_op','parser.py',54),
  ('op -> PLUS','op',1,'p_op','parser.py',59),
  ('op -> MINUS','op',1,'p_op','parser.py',60),
  ('op -> TIMES','op',1,'p_op','parser.py',61),
  ('op -> DIVIDE','op',1,'p_op','parser.py',62),
  ('statement -> MATRIX ID EQUALS TRANSPOSE LPAREN ID RPAREN SEMICOLON','statement',8,'p_statement_transpose','parser.py',67),
  ('statement -> MATRIX ID EQUALS DETERMINANT LPAREN ID RPAREN SEMICOLON','statement',8,'p_statement_determinant','parser.py',72),
  ('statement -> SCALAR ID EQUALS DETERMINANT LPAREN ID RPAREN SEMICOLON','statement',8,'p_statement_scalar_determinant','parser.py',77),
  ('matrix -> LBRACKET row_list RBRACKET','matrix',3,'p_matrix','parser.py',82),
  ('row_list -> row COMMA row_list','row_list',3,'p_row_list','parser.py',87),
  ('row_list -> row','row_list',1,'p_row_list','parser.py',88),
  ('row -> LBRACKET num_list RBRACKET','row',3,'p_row','parser.py',96),
  ('num_list -> NUM COMMA num_list','num_list',3,'p_num_list','parser.py',101),
  ('num_list -> NUM','num_list',1,'p_num_list','parser.py',102),
]
